/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { PollManager, PollManagerInterface } from "../PollManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "closePoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "question",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "optionNames",
        type: "string[]",
      },
    ],
    name: "createPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "getPoll",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "numParticipants",
            type: "uint256",
          },
        ],
        internalType: "struct PollManager.Poll",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPolls",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "numParticipants",
            type: "uint256",
          },
        ],
        internalType: "struct PollManager.Poll[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numPolls",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611994806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063120fe89b146100675780631a8cbcaa146100855780637e3d71c3146100b5578063842ff2bd146100d15780639534e637146100ef578063b384abef1461010b575b600080fd5b61006f610127565b60405161007c9190610f08565b60405180910390f35b61009f600480360381019061009a9190610f60565b6103f2565b6040516100ac919061101d565b60405180910390f35b6100cf60048036038101906100ca91906110fa565b610630565b005b6100d96107dc565b6040516100e6919061118a565b60405180910390f35b61010960048036038101906101049190610f60565b6107e2565b005b610125600480360381019061012091906111a5565b610918565b005b6060600060025467ffffffffffffffff811115610147576101466111e5565b5b60405190808252806020026020018201604052801561018057816020015b61016d610b64565b8152602001906001900390816101655790505b50905060005b6002548110156103ea576000808281526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461021d90611243565b80601f016020809104026020016040519081016040528092919081815260200182805461024990611243565b80156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561039257838290600052602060002090600202016040518060400160405290816000820180546102f790611243565b80601f016020809104026020016040519081016040528092919081815260200182805461032390611243565b80156103705780601f1061034557610100808354040283529160200191610370565b820191906000526020600020905b81548152906001019060200180831161035357829003601f168201915b50505050508152602001600182015481525050815260200190600101906102c4565b5050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815250508282815181106103d2576103d1611274565b5b60200260200101819052508080600101915050610186565b508091505090565b6103fa610b64565b6000808381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461048790611243565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390611243565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105fc578382906000526020600020906002020160405180604001604052908160008201805461056190611243565b80601f016020809104026020016040519081016040528092919081815260200182805461058d90611243565b80156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b505050505081526020016001820154815250508152602001906001019061052e565b5050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815250509050919050565b6000600254905060008060008381526020019081526020016000209050818160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160040160006101000a81548160ff02191690831515021790555085858260020191826106c992919061145a565b506000816005018190555060005b848490508110156107bb5781600301604051806040016040528087878581811061070457610703611274565b5b90506020028101906107169190611539565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816107a1919061159c565b5060208201518160010155505080806001019150506106d7565b50600260008154809291906107cf9061169d565b9190505550505050505050565b60025481565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90611768565b60405180910390fd5b60008082815260200190815260200160002060040160009054906101000a900460ff166108e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108de906117d4565b60405180910390fd5b600080600083815260200190815260200160002060040160006101000a81548160ff02191690831515021790555050565b60008083815260200190815260200160002060040160009054906101000a900460ff1661097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190611840565b60405180910390fd5b600081101580156109a257506000808381526020019081526020016000206003018054905081105b6109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906118ac565b60405180910390fd5b6001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a769061193e565b60405180910390fd5b6000808381526020019081526020016000206003018181548110610aa657610aa5611274565b5b90600052602060002090600202016001016000815480929190610ac89061169d565b91905055506000808381526020019081526020016000206005016000815480929190610af39061169d565b9190505550600180600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600015158152602001600081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610bf181610bde565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c2282610bf7565b9050919050565b610c3281610c17565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c72578082015181840152602081019050610c57565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c9a82610c38565b610ca48185610c43565b9350610cb4818560208601610c54565b610cbd81610c7e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006040830160008301518482036000860152610d118282610c8f565b9150506020830151610d266020860182610be8565b508091505092915050565b6000610d3d8383610cf4565b905092915050565b6000602082019050919050565b6000610d5d82610cc8565b610d678185610cd3565b935083602082028501610d7985610ce4565b8060005b85811015610db55784840389528151610d968582610d31565b9450610da183610d45565b925060208a01995050600181019050610d7d565b50829750879550505050505092915050565b60008115159050919050565b610ddc81610dc7565b82525050565b600060c083016000830151610dfa6000860182610be8565b506020830151610e0d6020860182610c29565b5060408301518482036040860152610e258282610c8f565b91505060608301518482036060860152610e3f8282610d52565b9150506080830151610e546080860182610dd3565b5060a0830151610e6760a0860182610be8565b508091505092915050565b6000610e7e8383610de2565b905092915050565b6000602082019050919050565b6000610e9e82610bb2565b610ea88185610bbd565b935083602082028501610eba85610bce565b8060005b85811015610ef65784840389528151610ed78582610e72565b9450610ee283610e86565b925060208a01995050600181019050610ebe565b50829750879550505050505092915050565b60006020820190508181036000830152610f228184610e93565b905092915050565b600080fd5b600080fd5b610f3d81610bde565b8114610f4857600080fd5b50565b600081359050610f5a81610f34565b92915050565b600060208284031215610f7657610f75610f2a565b5b6000610f8484828501610f4b565b91505092915050565b600060c083016000830151610fa56000860182610be8565b506020830151610fb86020860182610c29565b5060408301518482036040860152610fd08282610c8f565b91505060608301518482036060860152610fea8282610d52565b9150506080830151610fff6080860182610dd3565b5060a083015161101260a0860182610be8565b508091505092915050565b600060208201905081810360008301526110378184610f8d565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126110645761106361103f565b5b8235905067ffffffffffffffff81111561108157611080611044565b5b60208301915083600182028301111561109d5761109c611049565b5b9250929050565b60008083601f8401126110ba576110b961103f565b5b8235905067ffffffffffffffff8111156110d7576110d6611044565b5b6020830191508360208202830111156110f3576110f2611049565b5b9250929050565b6000806000806040858703121561111457611113610f2a565b5b600085013567ffffffffffffffff81111561113257611131610f2f565b5b61113e8782880161104e565b9450945050602085013567ffffffffffffffff81111561116157611160610f2f565b5b61116d878288016110a4565b925092505092959194509250565b61118481610bde565b82525050565b600060208201905061119f600083018461117b565b92915050565b600080604083850312156111bc576111bb610f2a565b5b60006111ca85828601610f4b565b92505060206111db85828601610f4b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061125b57607f821691505b60208210810361126e5761126d611214565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026113107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826112d3565b61131a86836112d3565b95508019841693508086168417925050509392505050565b6000819050919050565b600061135761135261134d84610bde565b611332565b610bde565b9050919050565b6000819050919050565b6113718361133c565b61138561137d8261135e565b8484546112e0565b825550505050565b600090565b61139a61138d565b6113a5818484611368565b505050565b5b818110156113c9576113be600082611392565b6001810190506113ab565b5050565b601f82111561140e576113df816112ae565b6113e8846112c3565b810160208510156113f7578190505b61140b611403856112c3565b8301826113aa565b50505b505050565b600082821c905092915050565b600061143160001984600802611413565b1980831691505092915050565b600061144a8383611420565b9150826002028217905092915050565b61146483836112a3565b67ffffffffffffffff81111561147d5761147c6111e5565b5b6114878254611243565b6114928282856113cd565b6000601f8311600181146114c157600084156114af578287013590505b6114b9858261143e565b865550611521565b601f1984166114cf866112ae565b60005b828110156114f7578489013582556001820191506020850194506020810190506114d2565b868310156115145784890135611510601f891682611420565b8355505b6001600288020188555050505b50505050505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126115565761155561152a565b5b80840192508235915067ffffffffffffffff8211156115785761157761152f565b5b60208301925060018202360383131561159457611593611534565b5b509250929050565b6115a582610c38565b67ffffffffffffffff8111156115be576115bd6111e5565b5b6115c88254611243565b6115d38282856113cd565b600060209050601f83116001811461160657600084156115f4578287015190505b6115fe858261143e565b865550611666565b601f198416611614866112ae565b60005b8281101561163c57848901518255600182019150602085019450602081019050611617565b868310156116595784890151611655601f891682611420565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116a882610bde565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116da576116d961166e565b5b600182019050919050565b600082825260208201905092915050565b7f6f6e6c7920706f6c6c2063726561746f722063616e20636c6f7365207468652060008201527f706f6c6c00000000000000000000000000000000000000000000000000000000602082015250565b60006117526024836116e5565b915061175d826116f6565b604082019050919050565b6000602082019050818103600083015261178181611745565b9050919050565b7f706f6c6c20697320616c726561647920636c6f73656400000000000000000000600082015250565b60006117be6016836116e5565b91506117c982611788565b602082019050919050565b600060208201905081810360008301526117ed816117b1565b9050919050565b7f706f6c6c20697320636c6f736564206e6f770000000000000000000000000000600082015250565b600061182a6012836116e5565b9150611835826117f4565b602082019050919050565b600060208201905081810360008301526118598161181d565b9050919050565b7f696e76616c6964206f7074696f6e206964000000000000000000000000000000600082015250565b60006118966011836116e5565b91506118a182611860565b602082019050919050565b600060208201905081810360008301526118c581611889565b9050919050565b7f796f75206861766520616c726561647920766f746564206f6e2074686973207060008201527f6f6c6c0000000000000000000000000000000000000000000000000000000000602082015250565b60006119286023836116e5565b9150611933826118cc565b604082019050919050565b600060208201905081810360008301526119578161191b565b905091905056fea2646970667358221220d85c2e786c2767aec842e05402d6e24a0913cc8f18c5d712fec86352f1c0842e64736f6c63430008180033";

type PollManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PollManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PollManager__factory extends ContractFactory {
  constructor(...args: PollManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PollManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PollManager__factory {
    return super.connect(runner) as PollManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PollManagerInterface {
    return new Interface(_abi) as PollManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PollManager {
    return new Contract(address, _abi, runner) as unknown as PollManager;
  }
}
