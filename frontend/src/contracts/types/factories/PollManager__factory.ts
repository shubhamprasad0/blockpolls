/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { PollManager, PollManagerInterface } from "../PollManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "question",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "optionNames",
        type: "string[]",
      },
    ],
    name: "createPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "getPoll",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct PollManager.Poll",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numPolls",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611278806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631a8cbcaa146100515780637e3d71c314610081578063842ff2bd1461009d578063b384abef146100bb575b600080fd5b61006b6004803603810190610066919061075b565b6100d7565b60405161007891906109ff565b60405180910390f35b61009b60048036038101906100969190610adc565b61030b565b005b6100a56104ad565b6040516100b29190610b6c565b60405180910390f35b6100d560048036038101906100d09190610b87565b6104b3565b005b6100df6106d4565b6000808381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461016c90610bf6565b80601f016020809104026020016040519081016040528092919081815260200182805461019890610bf6565b80156101e55780601f106101ba576101008083540402835291602001916101e5565b820191906000526020600020905b8154815290600101906020018083116101c857829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156102e1578382906000526020600020906002020160405180604001604052908160008201805461024690610bf6565b80601f016020809104026020016040519081016040528092919081815260200182805461027290610bf6565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b5050505050815260200160018201548152505081526020019060010190610213565b5050505081526020016004820160009054906101000a900460ff1615151515815250509050919050565b6000600254905060008060008381526020019081526020016000209050818160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160040160006101000a81548160ff02191690831515021790555085858260020191826103a4929190610e0d565b5060005b8484905081101561048c578160030160405180604001604052808787858181106103d5576103d4610edd565b5b90506020028101906103e79190610f1b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816104729190610f7e565b5060208201518160010155505080806001019150506103a8565b50600260008154809291906104a09061107f565b9190505550505050505050565b60025481565b60008083815260200190815260200160002060040160009054906101000a900460ff16610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c90611124565b60405180910390fd5b6000811015801561053d57506000808381526020019081526020016000206003018054905081105b61057c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057390611190565b60405180910390fd5b6001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190611222565b60405180910390fd5b600080838152602001908152602001600020600301818154811061064157610640610edd565b5b906000526020600020906002020160010160008154809291906106639061107f565b9190505550600180600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000151581525090565b600080fd5b600080fd5b6000819050919050565b61073881610725565b811461074357600080fd5b50565b6000813590506107558161072f565b92915050565b6000602082840312156107715761077061071b565b5b600061077f84828501610746565b91505092915050565b61079181610725565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107c282610797565b9050919050565b6107d2816107b7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108125780820151818401526020810190506107f7565b60008484015250505050565b6000601f19601f8301169050919050565b600061083a826107d8565b61084481856107e3565b93506108548185602086016107f4565b61085d8161081e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060408301600083015184820360008601526108b1828261082f565b91505060208301516108c66020860182610788565b508091505092915050565b60006108dd8383610894565b905092915050565b6000602082019050919050565b60006108fd82610868565b6109078185610873565b93508360208202850161091985610884565b8060005b85811015610955578484038952815161093685826108d1565b9450610941836108e5565b925060208a0199505060018101905061091d565b50829750879550505050505092915050565b60008115159050919050565b61097c81610967565b82525050565b600060a08301600083015161099a6000860182610788565b5060208301516109ad60208601826107c9565b50604083015184820360408601526109c5828261082f565b915050606083015184820360608601526109df82826108f2565b91505060808301516109f46080860182610973565b508091505092915050565b60006020820190508181036000830152610a198184610982565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a4657610a45610a21565b5b8235905067ffffffffffffffff811115610a6357610a62610a26565b5b602083019150836001820283011115610a7f57610a7e610a2b565b5b9250929050565b60008083601f840112610a9c57610a9b610a21565b5b8235905067ffffffffffffffff811115610ab957610ab8610a26565b5b602083019150836020820283011115610ad557610ad4610a2b565b5b9250929050565b60008060008060408587031215610af657610af561071b565b5b600085013567ffffffffffffffff811115610b1457610b13610720565b5b610b2087828801610a30565b9450945050602085013567ffffffffffffffff811115610b4357610b42610720565b5b610b4f87828801610a86565b925092505092959194509250565b610b6681610725565b82525050565b6000602082019050610b816000830184610b5d565b92915050565b60008060408385031215610b9e57610b9d61071b565b5b6000610bac85828601610746565b9250506020610bbd85828601610746565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c0e57607f821691505b602082108103610c2157610c20610bc7565b5b50919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610cc37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c86565b610ccd8683610c86565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d0a610d05610d0084610725565b610ce5565b610725565b9050919050565b6000819050919050565b610d2483610cef565b610d38610d3082610d11565b848454610c93565b825550505050565b600090565b610d4d610d40565b610d58818484610d1b565b505050565b5b81811015610d7c57610d71600082610d45565b600181019050610d5e565b5050565b601f821115610dc157610d9281610c61565b610d9b84610c76565b81016020851015610daa578190505b610dbe610db685610c76565b830182610d5d565b50505b505050565b600082821c905092915050565b6000610de460001984600802610dc6565b1980831691505092915050565b6000610dfd8383610dd3565b9150826002028217905092915050565b610e178383610c27565b67ffffffffffffffff811115610e3057610e2f610c32565b5b610e3a8254610bf6565b610e45828285610d80565b6000601f831160018114610e745760008415610e62578287013590505b610e6c8582610df1565b865550610ed4565b601f198416610e8286610c61565b60005b82811015610eaa57848901358255600182019150602085019450602081019050610e85565b86831015610ec75784890135610ec3601f891682610dd3565b8355505b6001600288020188555050505b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610f3857610f37610f0c565b5b80840192508235915067ffffffffffffffff821115610f5a57610f59610f11565b5b602083019250600182023603831315610f7657610f75610f16565b5b509250929050565b610f87826107d8565b67ffffffffffffffff811115610fa057610f9f610c32565b5b610faa8254610bf6565b610fb5828285610d80565b600060209050601f831160018114610fe85760008415610fd6578287015190505b610fe08582610df1565b865550611048565b601f198416610ff686610c61565b60005b8281101561101e57848901518255600182019150602085019450602081019050610ff9565b8683101561103b5784890151611037601f891682610dd3565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061108a82610725565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110bc576110bb611050565b5b600182019050919050565b600082825260208201905092915050565b7f706f6c6c20697320636c6f736564206e6f770000000000000000000000000000600082015250565b600061110e6012836110c7565b9150611119826110d8565b602082019050919050565b6000602082019050818103600083015261113d81611101565b9050919050565b7f696e76616c6964206f7074696f6e206964000000000000000000000000000000600082015250565b600061117a6011836110c7565b915061118582611144565b602082019050919050565b600060208201905081810360008301526111a98161116d565b9050919050565b7f796f75206861766520616c726561647920766f746564206f6e2074686973207060008201527f6f6c6c0000000000000000000000000000000000000000000000000000000000602082015250565b600061120c6023836110c7565b9150611217826111b0565b604082019050919050565b6000602082019050818103600083015261123b816111ff565b905091905056fea2646970667358221220eb026274d6af828a27c35e1dcfe3a731cc695015faf038e73f8d8525cd82a77b64736f6c63430008180033";

type PollManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PollManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PollManager__factory extends ContractFactory {
  constructor(...args: PollManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PollManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PollManager__factory {
    return super.connect(runner) as PollManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PollManagerInterface {
    return new Interface(_abi) as PollManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PollManager {
    return new Contract(address, _abi, runner) as unknown as PollManager;
  }
}
