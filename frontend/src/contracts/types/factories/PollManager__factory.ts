/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { PollManager, PollManagerInterface } from "../PollManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voterId",
        type: "address",
      },
    ],
    name: "AlreadyVoted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "ErrPollClosed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numOptions",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "invalidOptionId",
        type: "uint256",
      },
    ],
    name: "InvalidOption",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "senderId",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "pollCreator",
        type: "address",
      },
    ],
    name: "PollClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "pollCreator",
        type: "address",
      },
    ],
    name: "PollCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "pollCreator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "optionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "optionName",
        type: "string",
      },
    ],
    name: "VoteRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "closePoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "question",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "optionNames",
        type: "string[]",
      },
    ],
    name: "createPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "getPoll",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "numParticipants",
            type: "uint256",
          },
        ],
        internalType: "struct PollManager.Poll",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPolls",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "numParticipants",
            type: "uint256",
          },
        ],
        internalType: "struct PollManager.Poll[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voterAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numPolls",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611b57806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637e3d71c31161005b5780637e3d71c314610100578063842ff2bd1461011c5780639534e6371461013a578063b384abef146101565761007d565b8063120fe89b146100825780631a8cbcaa146100a057806342545825146100d0575b600080fd5b61008a610172565b604051610097919061117a565b60405180910390f35b6100ba60048036038101906100b591906111d2565b61043d565b6040516100c7919061128f565b60405180910390f35b6100ea60048036038101906100e591906112dd565b61067b565b6040516100f7919061132c565b60405180910390f35b61011a60048036038101906101159190611402565b6106e3565b005b6101246108d3565b6040516101319190611492565b60405180910390f35b610154600480360381019061014f91906111d2565b6108d9565b005b610170600480360381019061016b91906114ad565b610a90565b005b6060600060025467ffffffffffffffff811115610192576101916114ed565b5b6040519080825280602002602001820160405280156101cb57816020015b6101b8610dd6565b8152602001906001900390816101b05790505b50905060005b600254811015610435576000808281526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546102689061154b565b80601f01602080910402602001604051908101604052809291908181526020018280546102949061154b565b80156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156103dd57838290600052602060002090600202016040518060400160405290816000820180546103429061154b565b80601f016020809104026020016040519081016040528092919081815260200182805461036e9061154b565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b505050505081526020016001820154815250508152602001906001019061030f565b5050505081526020016004820160009054906101000a900460ff1615151515815260200160058201548152505082828151811061041d5761041c61157c565b5b602002602001018190525080806001019150506101d1565b508091505090565b610445610dd6565b6000808381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546104d29061154b565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe9061154b565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561064757838290600052602060002090600202016040518060400160405290816000820180546105ac9061154b565b80601f01602080910402602001604051908101604052809291908181526020018280546105d89061154b565b80156106255780601f106105fa57610100808354040283529160200191610625565b820191906000526020600020905b81548152906001019060200180831161060857829003601f168201915b5050505050815260200160018201548152505081526020019060010190610579565b5050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815250509050919050565b60006001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600254905060008060008381526020019081526020016000209050818160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160040160006101000a81548160ff021916908315150217905550858582600201918261077c929190611762565b506000816005018190555060005b8484905081101561086e578160030160405180604001604052808787858181106107b7576107b661157c565b5b90506020028101906107c99190611841565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161085491906118a4565b50602082015181600101555050808060010191505061078a565b5060026000815480929190610882906119a5565b91905055503373ffffffffffffffffffffffffffffffffffffffff16827fb447d309fd3b1a27466cdb08ccc02ee5188e9c71fc58af042bafe3e0bb45123060405160405180910390a3505050505050565b60025481565b8060008082815260200190815260200160002060040160009054906101000a900460ff1661093e57806040517f52e4ca570000000000000000000000000000000000000000000000000000000081526004016109359190611492565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109e55781336040517f589e27a10000000000000000000000000000000000000000000000000000000081526004016109dc9291906119fc565b60405180910390fd5b600080600084815260200190815260200160002060040160006101000a81548160ff02191690831515021790555060008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16827f5f9f4b9200056c29dcdf9532acb77e0d5368e9f85580b6e1aeff24c36bddea2b60405160405180910390a35050565b8160008082815260200190815260200160002060040160009054906101000a900460ff16610af557806040517f52e4ca57000000000000000000000000000000000000000000000000000000008152600401610aec9190611492565b60405180910390fd5b6000821080610b1c5750600080848152602001908152602001600020600301805490508210155b15610b7a578260008085815260200190815260200160002060030180549050836040517f11deefff000000000000000000000000000000000000000000000000000000008152600401610b7193929190611a25565b60405180910390fd5b6001600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c1c5782336040517f04f9da63000000000000000000000000000000000000000000000000000000008152600401610c139291906119fc565b60405180910390fd5b6000808481526020019081526020016000206003018281548110610c4357610c4261157c565b5b90600052602060002090600202016001016000815480929190610c65906119a5565b91905055506000808481526020019081526020016000206005016000815480929190610c90906119a5565b9190505550600180600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff1660008085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fe6946096c264a3c758a3c7f1a8ce2efe887c41a181be8eb87225ef77589bf81f856000808981526020019081526020016000206003018781548110610daa57610da961157c565b5b9060005260206000209060020201600001604051610dc9929190611af1565b60405180910390a4505050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600015158152602001600081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610e6381610e50565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9482610e69565b9050919050565b610ea481610e89565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ee4578082015181840152602081019050610ec9565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f0c82610eaa565b610f168185610eb5565b9350610f26818560208601610ec6565b610f2f81610ef0565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006040830160008301518482036000860152610f838282610f01565b9150506020830151610f986020860182610e5a565b508091505092915050565b6000610faf8383610f66565b905092915050565b6000602082019050919050565b6000610fcf82610f3a565b610fd98185610f45565b935083602082028501610feb85610f56565b8060005b8581101561102757848403895281516110088582610fa3565b945061101383610fb7565b925060208a01995050600181019050610fef565b50829750879550505050505092915050565b60008115159050919050565b61104e81611039565b82525050565b600060c08301600083015161106c6000860182610e5a565b50602083015161107f6020860182610e9b565b50604083015184820360408601526110978282610f01565b915050606083015184820360608601526110b18282610fc4565b91505060808301516110c66080860182611045565b5060a08301516110d960a0860182610e5a565b508091505092915050565b60006110f08383611054565b905092915050565b6000602082019050919050565b600061111082610e24565b61111a8185610e2f565b93508360208202850161112c85610e40565b8060005b85811015611168578484038952815161114985826110e4565b9450611154836110f8565b925060208a01995050600181019050611130565b50829750879550505050505092915050565b600060208201905081810360008301526111948184611105565b905092915050565b600080fd5b600080fd5b6111af81610e50565b81146111ba57600080fd5b50565b6000813590506111cc816111a6565b92915050565b6000602082840312156111e8576111e761119c565b5b60006111f6848285016111bd565b91505092915050565b600060c0830160008301516112176000860182610e5a565b50602083015161122a6020860182610e9b565b50604083015184820360408601526112428282610f01565b9150506060830151848203606086015261125c8282610fc4565b91505060808301516112716080860182611045565b5060a083015161128460a0860182610e5a565b508091505092915050565b600060208201905081810360008301526112a981846111ff565b905092915050565b6112ba81610e89565b81146112c557600080fd5b50565b6000813590506112d7816112b1565b92915050565b600080604083850312156112f4576112f361119c565b5b6000611302858286016112c8565b9250506020611313858286016111bd565b9150509250929050565b61132681611039565b82525050565b6000602082019050611341600083018461131d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261136c5761136b611347565b5b8235905067ffffffffffffffff8111156113895761138861134c565b5b6020830191508360018202830111156113a5576113a4611351565b5b9250929050565b60008083601f8401126113c2576113c1611347565b5b8235905067ffffffffffffffff8111156113df576113de61134c565b5b6020830191508360208202830111156113fb576113fa611351565b5b9250929050565b6000806000806040858703121561141c5761141b61119c565b5b600085013567ffffffffffffffff81111561143a576114396111a1565b5b61144687828801611356565b9450945050602085013567ffffffffffffffff811115611469576114686111a1565b5b611475878288016113ac565b925092505092959194509250565b61148c81610e50565b82525050565b60006020820190506114a76000830184611483565b92915050565b600080604083850312156114c4576114c361119c565b5b60006114d2858286016111bd565b92505060206114e3858286016111bd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061156357607f821691505b6020821081036115765761157561151c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115db565b61162286836115db565b95508019841693508086168417925050509392505050565b6000819050919050565b600061165f61165a61165584610e50565b61163a565b610e50565b9050919050565b6000819050919050565b61167983611644565b61168d61168582611666565b8484546115e8565b825550505050565b600090565b6116a2611695565b6116ad818484611670565b505050565b5b818110156116d1576116c660008261169a565b6001810190506116b3565b5050565b601f821115611716576116e7816115b6565b6116f0846115cb565b810160208510156116ff578190505b61171361170b856115cb565b8301826116b2565b50505b505050565b600082821c905092915050565b60006117396000198460080261171b565b1980831691505092915050565b60006117528383611728565b9150826002028217905092915050565b61176c83836115ab565b67ffffffffffffffff811115611785576117846114ed565b5b61178f825461154b565b61179a8282856116d5565b6000601f8311600181146117c957600084156117b7578287013590505b6117c18582611746565b865550611829565b601f1984166117d7866115b6565b60005b828110156117ff578489013582556001820191506020850194506020810190506117da565b8683101561181c5784890135611818601f891682611728565b8355505b6001600288020188555050505b50505050505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261185e5761185d611832565b5b80840192508235915067ffffffffffffffff8211156118805761187f611837565b5b60208301925060018202360383131561189c5761189b61183c565b5b509250929050565b6118ad82610eaa565b67ffffffffffffffff8111156118c6576118c56114ed565b5b6118d0825461154b565b6118db8282856116d5565b600060209050601f83116001811461190e57600084156118fc578287015190505b6119068582611746565b86555061196e565b601f19841661191c866115b6565b60005b828110156119445784890151825560018201915060208501945060208101905061191f565b86831015611961578489015161195d601f891682611728565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119b082610e50565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119e2576119e1611976565b5b600182019050919050565b6119f681610e89565b82525050565b6000604082019050611a116000830185611483565b611a1e60208301846119ed565b9392505050565b6000606082019050611a3a6000830186611483565b611a476020830185611483565b611a546040830184611483565b949350505050565b600082825260208201905092915050565b60008154611a7a8161154b565b611a848186611a5c565b94506001821660008114611a9f5760018114611ab557611ae8565b60ff198316865281151560200286019350611ae8565b611abe856115b6565b60005b83811015611ae057815481890152600182019150602081019050611ac1565b808801955050505b50505092915050565b6000604082019050611b066000830185611483565b8181036020830152611b188184611a6d565b9050939250505056fea26469706673582212201519b9a08dbdedcbea53a6fb9f2a2d6d598f1afe12ce94d741e49d3dd1c90a8264736f6c63430008180033";

type PollManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PollManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PollManager__factory extends ContractFactory {
  constructor(...args: PollManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PollManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PollManager__factory {
    return super.connect(runner) as PollManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PollManagerInterface {
    return new Interface(_abi) as PollManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PollManager {
    return new Contract(address, _abi, runner) as unknown as PollManager;
  }
}
