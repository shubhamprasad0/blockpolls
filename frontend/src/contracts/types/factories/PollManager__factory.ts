/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { PollManager, PollManagerInterface } from "../PollManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "closePoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "question",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "optionNames",
        type: "string[]",
      },
    ],
    name: "createPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "getPoll",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "numParticipants",
            type: "uint256",
          },
        ],
        internalType: "struct PollManager.Poll",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPolls",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "voteCount",
                type: "uint256",
              },
            ],
            internalType: "struct PollManager.Option[]",
            name: "options",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "numParticipants",
            type: "uint256",
          },
        ],
        internalType: "struct PollManager.Poll[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voterAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numPolls",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pollId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611add806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637e3d71c31161005b5780637e3d71c314610100578063842ff2bd1461011c5780639534e6371461013a578063b384abef146101565761007d565b8063120fe89b146100825780631a8cbcaa146100a057806342545825146100d0575b600080fd5b61008a610172565b6040516100979190610fbb565b60405180910390f35b6100ba60048036038101906100b59190611013565b61043d565b6040516100c791906110d0565b60405180910390f35b6100ea60048036038101906100e5919061111e565b61067b565b6040516100f7919061116d565b60405180910390f35b61011a60048036038101906101159190611243565b6106e3565b005b61012461088f565b60405161013191906112d3565b60405180910390f35b610154600480360381019061014f9190611013565b610895565b005b610170600480360381019061016b91906112ee565b6109cb565b005b6060600060025467ffffffffffffffff8111156101925761019161132e565b5b6040519080825280602002602001820160405280156101cb57816020015b6101b8610c17565b8152602001906001900390816101b05790505b50905060005b600254811015610435576000808281526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546102689061138c565b80601f01602080910402602001604051908101604052809291908181526020018280546102949061138c565b80156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156103dd57838290600052602060002090600202016040518060400160405290816000820180546103429061138c565b80601f016020809104026020016040519081016040528092919081815260200182805461036e9061138c565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b505050505081526020016001820154815250508152602001906001019061030f565b5050505081526020016004820160009054906101000a900460ff1615151515815260200160058201548152505082828151811061041d5761041c6113bd565b5b602002602001018190525080806001019150506101d1565b508091505090565b610445610c17565b6000808381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546104d29061138c565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe9061138c565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561064757838290600052602060002090600202016040518060400160405290816000820180546105ac9061138c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d89061138c565b80156106255780601f106105fa57610100808354040283529160200191610625565b820191906000526020600020905b81548152906001019060200180831161060857829003601f168201915b5050505050815260200160018201548152505081526020019060010190610579565b5050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815250509050919050565b60006001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600254905060008060008381526020019081526020016000209050818160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160040160006101000a81548160ff021916908315150217905550858582600201918261077c9291906115a3565b506000816005018190555060005b8484905081101561086e578160030160405180604001604052808787858181106107b7576107b66113bd565b5b90506020028101906107c99190611682565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161085491906116e5565b50602082015181600101555050808060010191505061078a565b5060026000815480929190610882906117e6565b9190505550505050505050565b60025481565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f906118b1565b60405180910390fd5b60008082815260200190815260200160002060040160009054906101000a900460ff1661099a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109919061191d565b60405180910390fd5b600080600083815260200190815260200160002060040160006101000a81548160ff02191690831515021790555050565b60008083815260200190815260200160002060040160009054906101000a900460ff16610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490611989565b60405180910390fd5b60008110158015610a5557506000808381526020019081526020016000206003018054905081105b610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b906119f5565b60405180910390fd5b6001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2990611a87565b60405180910390fd5b6000808381526020019081526020016000206003018181548110610b5957610b586113bd565b5b90600052602060002090600202016001016000815480929190610b7b906117e6565b91905055506000808381526020019081526020016000206005016000815480929190610ba6906117e6565b9190505550600180600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600015158152602001600081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610ca481610c91565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd582610caa565b9050919050565b610ce581610cca565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d25578082015181840152602081019050610d0a565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d4d82610ceb565b610d578185610cf6565b9350610d67818560208601610d07565b610d7081610d31565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006040830160008301518482036000860152610dc48282610d42565b9150506020830151610dd96020860182610c9b565b508091505092915050565b6000610df08383610da7565b905092915050565b6000602082019050919050565b6000610e1082610d7b565b610e1a8185610d86565b935083602082028501610e2c85610d97565b8060005b85811015610e685784840389528151610e498582610de4565b9450610e5483610df8565b925060208a01995050600181019050610e30565b50829750879550505050505092915050565b60008115159050919050565b610e8f81610e7a565b82525050565b600060c083016000830151610ead6000860182610c9b565b506020830151610ec06020860182610cdc565b5060408301518482036040860152610ed88282610d42565b91505060608301518482036060860152610ef28282610e05565b9150506080830151610f076080860182610e86565b5060a0830151610f1a60a0860182610c9b565b508091505092915050565b6000610f318383610e95565b905092915050565b6000602082019050919050565b6000610f5182610c65565b610f5b8185610c70565b935083602082028501610f6d85610c81565b8060005b85811015610fa95784840389528151610f8a8582610f25565b9450610f9583610f39565b925060208a01995050600181019050610f71565b50829750879550505050505092915050565b60006020820190508181036000830152610fd58184610f46565b905092915050565b600080fd5b600080fd5b610ff081610c91565b8114610ffb57600080fd5b50565b60008135905061100d81610fe7565b92915050565b60006020828403121561102957611028610fdd565b5b600061103784828501610ffe565b91505092915050565b600060c0830160008301516110586000860182610c9b565b50602083015161106b6020860182610cdc565b50604083015184820360408601526110838282610d42565b9150506060830151848203606086015261109d8282610e05565b91505060808301516110b26080860182610e86565b5060a08301516110c560a0860182610c9b565b508091505092915050565b600060208201905081810360008301526110ea8184611040565b905092915050565b6110fb81610cca565b811461110657600080fd5b50565b600081359050611118816110f2565b92915050565b6000806040838503121561113557611134610fdd565b5b600061114385828601611109565b925050602061115485828601610ffe565b9150509250929050565b61116781610e7a565b82525050565b6000602082019050611182600083018461115e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111ad576111ac611188565b5b8235905067ffffffffffffffff8111156111ca576111c961118d565b5b6020830191508360018202830111156111e6576111e5611192565b5b9250929050565b60008083601f84011261120357611202611188565b5b8235905067ffffffffffffffff8111156112205761121f61118d565b5b60208301915083602082028301111561123c5761123b611192565b5b9250929050565b6000806000806040858703121561125d5761125c610fdd565b5b600085013567ffffffffffffffff81111561127b5761127a610fe2565b5b61128787828801611197565b9450945050602085013567ffffffffffffffff8111156112aa576112a9610fe2565b5b6112b6878288016111ed565b925092505092959194509250565b6112cd81610c91565b82525050565b60006020820190506112e860008301846112c4565b92915050565b6000806040838503121561130557611304610fdd565b5b600061131385828601610ffe565b925050602061132485828601610ffe565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113a457607f821691505b6020821081036113b7576113b661135d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026114597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261141c565b611463868361141c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006114a061149b61149684610c91565b61147b565b610c91565b9050919050565b6000819050919050565b6114ba83611485565b6114ce6114c6826114a7565b848454611429565b825550505050565b600090565b6114e36114d6565b6114ee8184846114b1565b505050565b5b81811015611512576115076000826114db565b6001810190506114f4565b5050565b601f82111561155757611528816113f7565b6115318461140c565b81016020851015611540578190505b61155461154c8561140c565b8301826114f3565b50505b505050565b600082821c905092915050565b600061157a6000198460080261155c565b1980831691505092915050565b60006115938383611569565b9150826002028217905092915050565b6115ad83836113ec565b67ffffffffffffffff8111156115c6576115c561132e565b5b6115d0825461138c565b6115db828285611516565b6000601f83116001811461160a57600084156115f8578287013590505b6116028582611587565b86555061166a565b601f198416611618866113f7565b60005b828110156116405784890135825560018201915060208501945060208101905061161b565b8683101561165d5784890135611659601f891682611569565b8355505b6001600288020188555050505b50505050505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261169f5761169e611673565b5b80840192508235915067ffffffffffffffff8211156116c1576116c0611678565b5b6020830192506001820236038313156116dd576116dc61167d565b5b509250929050565b6116ee82610ceb565b67ffffffffffffffff8111156117075761170661132e565b5b611711825461138c565b61171c828285611516565b600060209050601f83116001811461174f576000841561173d578287015190505b6117478582611587565b8655506117af565b601f19841661175d866113f7565b60005b8281101561178557848901518255600182019150602085019450602081019050611760565b868310156117a2578489015161179e601f891682611569565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117f182610c91565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611823576118226117b7565b5b600182019050919050565b600082825260208201905092915050565b7f6f6e6c7920706f6c6c2063726561746f722063616e20636c6f7365207468652060008201527f706f6c6c00000000000000000000000000000000000000000000000000000000602082015250565b600061189b60248361182e565b91506118a68261183f565b604082019050919050565b600060208201905081810360008301526118ca8161188e565b9050919050565b7f706f6c6c20697320616c726561647920636c6f73656400000000000000000000600082015250565b600061190760168361182e565b9150611912826118d1565b602082019050919050565b60006020820190508181036000830152611936816118fa565b9050919050565b7f706f6c6c20697320636c6f736564206e6f770000000000000000000000000000600082015250565b600061197360128361182e565b915061197e8261193d565b602082019050919050565b600060208201905081810360008301526119a281611966565b9050919050565b7f696e76616c6964206f7074696f6e206964000000000000000000000000000000600082015250565b60006119df60118361182e565b91506119ea826119a9565b602082019050919050565b60006020820190508181036000830152611a0e816119d2565b9050919050565b7f796f75206861766520616c726561647920766f746564206f6e2074686973207060008201527f6f6c6c0000000000000000000000000000000000000000000000000000000000602082015250565b6000611a7160238361182e565b9150611a7c82611a15565b604082019050919050565b60006020820190508181036000830152611aa081611a64565b905091905056fea2646970667358221220b40cedea73c2271ca5096dd13946d17f08a840ad68d66496c0217bfd693d7bb464736f6c63430008180033";

type PollManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PollManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PollManager__factory extends ContractFactory {
  constructor(...args: PollManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PollManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PollManager__factory {
    return super.connect(runner) as PollManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PollManagerInterface {
    return new Interface(_abi) as PollManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PollManager {
    return new Contract(address, _abi, runner) as unknown as PollManager;
  }
}
